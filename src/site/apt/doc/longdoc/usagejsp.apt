                                     ------------------------
                             Usage of Weblets in a JSP centric environment
                                     ------------------------

Preface

    As <<<Weblets>>> originated from a project which was developed for an <<<Ajax>>> and <<<JSF>>> centric book.
    <<<Weblets>>> has extensive tooling support for <<<JSF>>>, but it tries to cover as many web frameworks
    as possible in at least a generic way. And the most important ones in native ways if possible.

    Therefore, native support of <<<JSP>>> as a very important frontend technology  was important.


 * Setup

    The setup is already described in the {{{./setup.html}Setup guide}}.

    To get <<<Weblets>>> up and running you need a valid <<<Weblets>>> servlet configuration.
    Unlike <<<JSF>>> we do not have any automatisms in place. The configuration has to be done
    explicitly, with a path pattern as trigger for the servlet.

+--------------------------------------------------
    <servlet>
        <servlet-name>Weblets Servlet</servlet-name>
        <servlet-class>net.java.dev.weblets.WebletsServlet</servlet-class>
    </servlet>


    <!-- The <<<Weblets>>> servlet mapping must be path based otherwise <<<Weblets>>> will fail! -->
    <servlet-mapping>
        <servlet-name>Weblets Servlet</servlet-name>
        <url-pattern>/weblets/*</url-pattern>
    </servlet-mapping>
+--------------------------------------------------

    More information on the entire web.xml configuration can be found under {{{setup.at}Weblets:Setup guide}}


* Basic Functions

** Introduction

    <<<Weblets>>> contain two parts in their execution pipeline, a frontend <<<API>>>, which enables a
    neutral notation for application developers to isolate the resource call from the actual calling protocol and position.
     a calling resolution stage, which intercepts the actual resource call and serves the
    resource from a given datasource.

    Now this sounds more complicated, than it really is, all the application programmer has to use,
    is the frontend specific <<<API>>>.

    <<<Weblets>>> tries to be as precise as possible in the <<<APIs>>> and their results, so that in all frameworks
    and platforms the application programmer can be sure that the final result stays the same, not depending
    on the underlying framework being used.

    The basic idea of the weblet fronted API, are two contract functions/methods.

  <Code 1: Contract Functions/Methods>

+--------------------------------------------------
    url(<webletname>,<path to resource>)
    resource(<webletname>,<path to resource>)
+--------------------------------------------------

    In every framework supported, you always will find those in one way or the other.

    The main difference between these two contract methods is, that <<<url>>> serves up
    a full url including the current web application context, while <<<resource>>>
    only serves up the relative path to the resource.

    The following code example shows the two calls and their results.

    <Code 2: Difference between url and resource in a pseudo  API>

+----------------------------------------------------------------------
        url ("org.myapp.html","/myresource.js")
        resolves to /my-webapp/faces/weblets/myapp/myresource.js

        resource( "org.myapp.html","/myresource.js")
        resolves to /faces/weblets/myapp/myresource.js
+----------------------------------------------------------------------

* <<<JSP>>> Frontend APIs

    Over the years <<<JSP>>> has evolved, <<<Weblets>>> tries to cover <<<JSP>>> as extensively
    as possible. Hence, it provides several APIs to the frontend developer,
    which can be used accordingly to the <<<JSP>>> version in use.

** The Basic <<<JSP>>> Bean API

    <<<Weblets>>> provides as the most basic and most compatible mechanism a simple bean,
    which can be utilized by the backend or frontend, you can use scriptlets to access this bean.
    It should be compatible with all <<<JSP>>> versions, although we have more elegant and simpler solutions
    for JSP2.x.

    <Code 3: Accessing <<<Weblets>>> via beans and scriptlets>

+------------------------------
    <jsp:useBean class="net.java.dev.weblets.WebletsUtils" scope="application" id="jspweblet" />
    bean definition in your header
    
    <%= jspweblet.getResource( "weblets.demo","/welcome.js") %>
    <%= jspweblet.getUrl( "weblets.demo","/welcome.js") %>
+------------------------------

    As you can see we include our utils class as simple <<<JSP>>> bean, the bean then
    provides our resource and url functions.

** EL Functions for <<<JSP>>> 2.x

    JSP2 provides newer <<<EL>>> implementations which have so called <<<EL Functions>>>, those are functions which can be added
    extend the actual functionality provided by standard EL.
    <<<Weblets>>> provide such function

     The next example shows how to use the <<<EL>>> functions:

    <Code 5: Usage of <<<EL>>> functions

+----------------------------------------------
     xmlns:wbl="http://weblets.dev.java.net/tags_jsp2" this has to be added to your namespace definitions

      <h:outputText value="${wbl:url('weblets.demo','/welcome.js')}" />
      <h:graphicImage value="${wbl:resource('weblets.demo','/img/icon_alert.gif')}" />
+----------------------------------------------


* JSP Backend APIs

    The JSP backend APIs are the same as the servlet APIs for further reference see
    {{{usagejava.apt}Weblets: Java APIs}}}


Summary

    Weblets are fully supported in JSP,depending on your JSP version in use,
    you have various possibilities to access <<<Weblets>>> from your JSP page.

=======================================================================

* Contents

   [[1]] {{{./index.html} Users Documentation: Index }}

   [[2]] {{{./gettingstarted.html} Users Documentation: Getting Started }}

   [[3]] {{{./setup.html} Users Documentation: Setup Guide }}

   [[4]] {{{./usagejsp.html} Users Documentation: JSP Weblets Usage Guide }}

   [[5]] {{{./usagejava.html} Users Documentation: Servlet Weblets Usage Guide }}

   [[5]] {{{./usagejsf.html} Users Documentation: JSF Weblets Usage Guide }}

   [[6]] {{{./usageresources.html} Users Documentation: Resources Weblets Usage Guide }}

   [[7]] {{{./packingweblets.html} Users Documentation: Weblets Packaging Guide }}
