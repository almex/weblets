                                     ------------------------
                                   Usage of Weblets in a Java/Servlet centric environment
                                     ------------------------

Preface

     As Weblets originated from a project which was developed for an ajax and jsf centric book,
     Weblets has extensive tooling support for jsf, and tries to utilize JSFs internal structures
     extensively, to ease the configuration and usage.

     Weblets itself is not jsf centric, but it has a very strong jsf tooling support besides its generic
     web framework coverage. Over time it might be possible that other web frameworks could be supported
     in a similar way where needed.

     The base of most if not all web framework technologies is the Java Servlet technology.
     A very robust  frontend controller which can be programmed easily and extensively.
     The sheer existence of this technology for such a long time with almost no changes
     and only the enhancement with extension features shows the strong patter in use.
     It simply was the holy grail of a web framework kernel found very early.

     To support most web frameworks in the most generic way, an extensive tooling support for
     a servlet environment is provided by Weblets.
     The tooling consists of two parts

        ** A Weblets Servlet for weblets url interception and resource streaming
        ** Generic API Utils classes for loading weblets from Servlets and servlet based technologies

* Setup

     To get <<<Weblets>>> up and running you need a valid <<<Weblets>>> servlet configuration.
     Unlike <<<JSF>>> we do not have any automatisms in place. The configuration has to be done
     explicitly, with a path pattern as trigger for the servlet.

 +--------------------------------------------------
     <servlet>
         <servlet-name>Weblets Servlet</servlet-name>
         <servlet-class>net.java.dev.weblets.WebletsServlet</servlet-class>
     </servlet>


     <!-- The <<<Weblets>>> servlet mapping must be path based otherwise <<<Weblets>>> will fail! -->
     <servlet-mapping>
         <servlet-name>Weblets Servlet</servlet-name>
         <url-pattern>/weblets/*</url-pattern>
     </servlet-mapping>
 +--------------------------------------------------

     More information on the entire web.xml configuration can be found under {{{setup.at}Weblets:Setup guide}}
 
* Basic Functions

** Introduction

    <<<Weblets>>> contain two parts in their execution pipeline, a frontend <<<API>>>, which enables a
    neutral notation for application developers to isolate the resource call from the actual calling protocol and position.
     a calling resolution stage, which intercepts the actual resource call and serves the
    resource from a given datasource.

    Now this sounds more complicated, than it really is, all the application programmer has to use,
    is the frontend specific <<<API>>>.

    <<<Weblets>>> tries to be as precise as possible in the <<<APIs>>> and their results, so that in all frameworks
    and platforms the application programmer can be sure that the final result stays the same, not depending
    on the underlying framework being used.

    The basic idea of the weblet fronted API, are two contract functions/methods.

  <Code 1: Contract Functions/Methods>

+--------------------------------------------------
    url(<webletname>,<path to resource>)
    resource(<webletname>,<path to resource>)
+--------------------------------------------------

    In every framework supported, you always will find those in one way or the other.

    The main difference between these two contract methods is, that <<<url>>> serves up
    a full url including the current web application context, while <<<resource>>>
    only serves up the relative path to the resource.

    The following code example shows the two calls and their results.

    <Code 2: Difference between url and resource in a pseudo  API>

+----------------------------------------------------------------------
        url ("org.myapp.html","/myresource.js")
        resolves to /my-webapp/faces/weblets/myapp/myresource.js

        resource( "org.myapp.html","/myresource.js")
        resolves to /faces/weblets/myapp/myresource.js
+----------------------------------------------------------------------

** Weblets Servlet APIs

    The Weblets Servlet APIs are very simple to use, they basically are the two contract functions mapped
    into a utils singleton class.

+----------------------------------------------------------------------
    WebletsUtils.getResource("org.myapp.html", "/myresource.js")
    WebletsUtils.getUrl("org.myapp.html", "/myresource.js")

    or

    WebletsUtils.getInstance().getResource("org.myapp.html", "/myresource.js")
    WebletsUtils.getInstance().getUrl("org.myapp.html", "/myresource.js")
+----------------------------------------------------------------------

    It is up to your personal preference which version of the calling methods you use, internally
    everything is resolved into a singleton call.
    The methods themselves are thread save, they should not cause any problems in a multithreaded
    environment which basically every server is!

    Note, we dont have a request object passed down here, to determine the web application context.
    As already mentioned in the setup guide, we cannot always be sure to have access to the request object.

    (A classical situation for instance would be a long running thread which tries to generate
    some resource urls outside of any request scope)

    Some webframeworks bypass it or wrap it or simply add additional behavior via decoration classes.
    To be as generic as possible we kept the request object out of the API and try to get the context name
    by other means!
    
    Weblets tries to determine the web application context by various means:

        ** In a JEE5 environment it uses the Servlet context which has a clearly defined api which returns the web application context name

        ** In a pre JEE5 environment you can set a filter in your web xml, which intercepts a request before serving the first resource, then you always can get the web application context internall

        ** If both methods fail you can set the context name manually via a web.xml context parameter, this is more or less the final override to enforce a context name

    For more information on the three methods see the Weblets setup guide.

Summary
    The weblets servlet apis are simple to use, they are just a Utils class wrapping up and serving the contractual
    functions/methods!
